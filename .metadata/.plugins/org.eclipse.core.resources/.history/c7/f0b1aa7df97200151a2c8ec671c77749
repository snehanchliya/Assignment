package com.mobisoftassignment;

import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.graphics.Point;
import android.graphics.Rect;
import android.util.AttributeSet;
import android.util.Log;
import android.view.Display;
import android.view.MotionEvent;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

public class ControlCustomView extends View {

	public interface Cordinates {
		void getCordinates(Point point);

	}

	float x = 200;
	float y = 200;
	Paint paint, progressPaint;
	Rect rectangle, progress;
	int left = 10;
	int top = 80;
	Bitmap bitmap, arrow;
	boolean isCircle = true;
	Context context;
	int circleX, circleY, trangleX, trangleY;
	TextView cordinates;

	public void setCordinateListener(TextView cordinates) {

		this.cordinates = cordinates;

	}

	public ControlCustomView(final Context context, AttributeSet attrs) {
		super(context, attrs);
		// TODO Auto-generated constructor stub
		this.context = context;

		bitmap = BitmapFactory.decodeResource(context.getResources(),
				R.drawable.circle);

		arrow = BitmapFactory.decodeResource(context.getResources(),
				R.drawable.arrow);

		// create a rectangle that we'll draw later
		rectangle = new Rect(left, top, getCenter().x -70, top + 20);

		progress = new Rect(left, top, 100, top + 20);
		// create the Paint and set its color
		paint = new Paint();
		paint.setARGB(126, 61, 117, 179); // (Color.BLUE);
		paint.setShadowLayer(5, 5, 5, Color.BLACK);
		paint.setStyle(Style.FILL_AND_STROKE);
		paint.setStrokeWidth(5);

		progressPaint = new Paint();
		progressPaint.setARGB(237, 237, 148, 144); // Maharoon
		progressPaint.setShadowLayer(5, 0, 5, Color.BLACK);

		Point circlePoints = getCircleCordinates();
		circleX = 0;// circlePoints.x;
		circleY = 0;// circlePoints.y;
		trangleX = 25;// circleX+25;
		trangleY = 55;// circleY+55;
		
		setLayerType(LAYER_TYPE_SOFTWARE, null);

		Log.i("Tangle Postion", trangleX + " " + trangleY);
	
	}

	@Override
	protected void onDraw(Canvas canvas) {
		// TODO Auto-generated method stub
		super.onDraw(canvas);

		canvas.drawRect(rectangle, paint);

		canvas.drawRect(progress, progressPaint);

		//canvas.drawBitmap(arrow, trangleX, trangleY, null);

		//canvas.drawBitmap(bitmap, circleX, circleY, null);
	}

	public float getAngle(Point target) {
		float angle = (float) Math.toDegrees(Math.atan2(target.y - y, target.x
				- x));

		if (angle < 0) {
			angle += 360;
		}

		return angle;
	}

	private Point getCircleCordinates() {
		Point circlePoints = new Point();
		circlePoints.x = (getCenter().x - 200) / 2;
		circlePoints.y = getCenter().y / 4;
		return circlePoints;
	}

	private Point getCenter() {

		Display display = ((Activity) context).getWindowManager()
				.getDefaultDisplay();
		Point size = new Point();
		display.getSize(size);

		return size;
	}

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		// TODO Auto-generated method stub

		switch (event.getAction()) {

		case MotionEvent.ACTION_MOVE:
			x = event.getX();
			y = event.getY();
			int position = (int) x;
			Point point = new Point((int) x, (int) y);
			// float angle=getAngle(point);
			// trangleX=point.x;
			// trangleY=point.y;
			Log.i("Cordinates", "X= " + x + " Y= " + y);
			// cordinates.getCordinates(p);
			// cordinates.setText("X= "+point.x+" Y= "+point.y);
			MoveSeekBar(point);

			invalidate();
			break;

		// case MotionEvent.ACTION_DOWN:
		// MoveTrangle();

		}
		return true;
	}

	private void MoveSeekBar(Point point) {

		trangleX++;
		trangleY--;

		int xOfYourBitmap = 10;
		int yOfYourBitmap = 80;
		int x = point.x;
		int y = point.y;
		int maxWidth=getCenter().x -70;
		int maxHeight=yOfYourBitmap + 40;
		if (x >= xOfYourBitmap && x < (maxWidth)
				&& y >= yOfYourBitmap && y < (maxHeight)) {
			// tada, if this is true, you've started your click inside your
			// bitmap
			progress = new Rect(left, top, point.x, top + 20);
		}

		// trangleX=100+trangleY;
		// trangleY=100+trangleX;

		Log.e("X= and Y= ", trangleX + " " + trangleY);
	}

	private class Circle {
		int x, y;

		public int getX() {
			return x;
		}

		public void setX(int x) {
			this.x = x;
		}

		public int getY() {
			return y;
		}

		public void setY(int y) {
			this.y = y;
		}

	}
}