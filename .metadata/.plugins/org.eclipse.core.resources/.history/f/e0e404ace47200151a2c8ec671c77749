package com.mobisoftassignment;

import android.annotation.TargetApi;
import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.TypedArray;
import android.graphics.Color;
import android.graphics.PorterDuff;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.graphics.drawable.LayerDrawable;
import android.graphics.drawable.NinePatchDrawable;
import android.graphics.drawable.ScaleDrawable;
import android.os.Build;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.widget.SeekBar;
import android.widget.Toast;

import java.util.concurrent.Callable;

public class SeekBarCompat extends SeekBar implements View.OnTouchListener {

	public interface PositionListener {
		public void GetPosition(int position);
	}

	private static final String TAG = "SeekBarCompat";
	private int mActualBackgroundColor;

	int mThumbColor, mProgressColor, mProgressBackgroundColor;

	Drawable mThumb;

	int[] colorsThumb = new int[] { Color.BLACK, Color.BLACK, Color.LTGRAY,
			Color.BLACK };

	int[] colorsProgress = new int[] { Color.BLACK, Color.BLACK, Color.LTGRAY,
			Color.BLACK };

	int[] colorsProgressBackground = new int[] { Color.BLACK, Color.BLACK,
			Color.LTGRAY, Color.BLACK

	};

	ColorStateList mColorStateListThumb, mColorStateListProgress,
			mColorStateListProgressBackground;

	private int mOriginalThumbHeight;
	private int mThumbAlpha = 255;
	private boolean mIsEnabled = true;
	private PositionListener progressBarCounterListner;

	public void setPositionListener(PositionListener listener) {
		// this.context=context;
		progressBarCounterListner = listener;
	}

	public void setThumbColor(final int thumbColor) {
		mThumbColor = thumbColor;

		gradientDrawable.setColor(mIsEnabled ? thumbColor : Color.LTGRAY);

		invalidate();
		requestLayout();
	}

	public void setProgressColor(final int progressColor) {
		mProgressColor = progressColor;

		setupProgressColor();

		invalidate();
		requestLayout();
	}

	private void setupProgressColor() {
		// load up the drawable and apply color
		LayerDrawable ld = (LayerDrawable) getProgressDrawable();
		
		ScaleDrawable shape = (ScaleDrawable) (ld
				.findDrawableByLayerId(android.R.id.progress));			
		
		shape.setColorFilter(mProgressColor, PorterDuff.Mode.SRC_IN);

		// set the background to transparent
		NinePatchDrawable ninePatchDrawable = (NinePatchDrawable) (ld
				.findDrawableByLayerId(android.R.id.background));
		ninePatchDrawable.setColorFilter(Color.TRANSPARENT,
				PorterDuff.Mode.SRC_IN);
	}

	
	public void setProgressBackgroundColor(final int progressBackgroundColor) {
		mProgressBackgroundColor = progressBackgroundColor;

		setupProgressBackground();

		invalidate();
		requestLayout();
	}

	private void setupProgressBackground() {
		// load up the drawable and apply color
		SeekBarBackgroundDrawable seekBarBackgroundDrawable = new SeekBarBackgroundDrawable(
				getContext(), mProgressBackgroundColor, mActualBackgroundColor,
				getPaddingLeft(), getPaddingRight());
		setBackgroundDrawable(seekBarBackgroundDrawable);

	}

	public SeekBarCompat(final Context context) {
		super(context);

	}

	GradientDrawable gradientDrawable = new GradientDrawable();

	public SeekBarCompat(final Context context, final AttributeSet attrs) {
		super(context, attrs);
		TypedArray a = context.getTheme().obtainStyledAttributes(attrs,
				R.styleable.SeekBarCompat, 0, 0);
		int array[] = { android.R.attr.background, android.R.attr.enabled };
		TypedArray b = context.getTheme().obtainStyledAttributes(attrs, array,
				0, 0);
		try {
			mThumbColor = a.getColor(R.styleable.SeekBarCompat_thumbColor,
					getPrimaryColorFromSelectedTheme(context));
			mProgressColor = a.getColor(
					R.styleable.SeekBarCompat_progressColor,
					getPrimaryColorFromSelectedTheme(context));			
			mProgressBackgroundColor = a.getColor(
					R.styleable.SeekBarCompat_progressBackgroundColor,
					Color.CYAN);			
			mThumbAlpha = (int) (a.getFloat(
					R.styleable.SeekBarCompat_thumbAlpha, 1) * 255);
			mActualBackgroundColor = b.getColor(0, Color.TRANSPARENT);
			mIsEnabled = b.getBoolean(1, true);

			Log.e(TAG, "SeekBarCompat isEnabled? " + mIsEnabled);
			setupProgressColor();
			setOnTouchListener(this);
			gradientDrawable.setShape(GradientDrawable.OVAL);
			gradientDrawable.setSize(50, 50);
			gradientDrawable.setColor(mIsEnabled ? mThumbColor : Color.LTGRAY);
			triggerMethodOnceViewIsDisplayed(this, new Callable<Void>() {
				@Override
				public Void call() throws Exception {
					ViewGroup.LayoutParams layoutParams = getLayoutParams();
					mOriginalThumbHeight = mThumb.getIntrinsicHeight();
					gradientDrawable.setSize(mOriginalThumbHeight / 3,
							mOriginalThumbHeight / 3);
					gradientDrawable.setAlpha(0);
					
					setThumb(gradientDrawable);
					if (layoutParams.height < mOriginalThumbHeight)
						layoutParams.height = mOriginalThumbHeight;
					setupProgressBackground();
					return null;
				}
			});

		} finally {
			a.recycle();
			b.recycle();
		}
	}
	
	public static int getPrimaryColorFromSelectedTheme(Context context) {
		// int[] attrs = {R.attr.colorPrimary, R.attr.colorPrimaryDark};
		int[] attrs = { 0, 1 };
		TypedArray ta = context.getTheme().obtainStyledAttributes(attrs);
		int primaryColor = ta.getColor(0, Color.RED); // 1 index for
														// primaryColorDark
		// default value for primaryColor is set to black if primaryColor not
		// found
		ta.recycle();
		return primaryColor;
	}

	public static void triggerMethodOnceViewIsDisplayed(final View view,
			final Callable<Void> method) {
		final ViewTreeObserver observer = view.getViewTreeObserver();
		observer.addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
			@Override
			public void onGlobalLayout() {
				if (Build.VERSION.SDK_INT < 16) {
					view.getViewTreeObserver().removeGlobalOnLayoutListener(
							this);
				} else
					view.getViewTreeObserver().removeGlobalOnLayoutListener(
							this);
				try {
					method.call();
				} catch (Exception e) {
					Log.e(TAG, "onGlobalLayout " + e.toString());
				}
			}
		});
	}

	@Override
	public boolean onTouch(final View v, final MotionEvent event) {

		switch (event.getAction()) {

		case MotionEvent.ACTION_MOVE:
			progressBarCounterListner.GetPosition(getProgress());

		}
		return false;
	}

	@Override
	public void setThumb(final Drawable thumb) {
		super.setThumb(thumb);
		mThumb = thumb;
	}

	@Override
	public void setEnabled(final boolean enabled) {
		mIsEnabled = enabled;
		triggerMethodOnceViewIsDisplayed(this, new Callable<Void>() {
			
			@Override
			public Void call() throws Exception {

				gradientDrawable = new GradientDrawable();
				gradientDrawable.setShape(GradientDrawable.OVAL);
				gradientDrawable.setSize(mOriginalThumbHeight / 3,
						mOriginalThumbHeight / 3);
				gradientDrawable.setColor(mIsEnabled ? mThumbColor
						: Color.LTGRAY);
				gradientDrawable.setDither(true);
				gradientDrawable.setAlpha(mThumbAlpha);
				setThumb(gradientDrawable);
				// load up the drawable and apply color
				LayerDrawable ld = (LayerDrawable) getProgressDrawable();
				ScaleDrawable shape = (ScaleDrawable) (ld
						.findDrawableByLayerId(android.R.id.progress));
				shape.setColorFilter(
						mIsEnabled ? mProgressColor : Color.LTGRAY,
						PorterDuff.Mode.SRC_IN);
				// set the background to transparent
				NinePatchDrawable ninePatchDrawable = (NinePatchDrawable) (ld
						.findDrawableByLayerId(android.R.id.background));
				ninePatchDrawable.setColorFilter(Color.TRANSPARENT,
						PorterDuff.Mode.SRC_IN);
				// background
				// load up the drawable and apply color
				SeekBarBackgroundDrawable seekBarBackgroundDrawable = new SeekBarBackgroundDrawable(
						getContext(), mIsEnabled ? mProgressBackgroundColor
								: Color.LTGRAY, mActualBackgroundColor,
						getPaddingLeft(), getPaddingRight());

				setBackgroundDrawable(seekBarBackgroundDrawable);

				SeekBarCompat.super.setEnabled(enabled);
				return null;
			}
		});

	}
}
